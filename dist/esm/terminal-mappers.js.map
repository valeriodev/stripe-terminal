{"version":3,"file":"terminal-mappers.js","sourceRoot":"","sources":["../../src/terminal-mappers.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Reader } from '@stripe/terminal-js/types/terminal';\n\nimport type { Cart, LocationInterface, ReaderInterface } from './definitions';\nimport { BatteryStatus, DeviceType, LocationStatus, NetworkStatus } from './definitions';\nimport type { ICart } from './stripe-types/proto';\n\nexport const mapFromCartToICart = (cart: Cart): ICart => {\n  return {\n    line_items: cart.lineItems.map((item) => ({\n      description: item.displayName,\n      quantity: item.quantity,\n      amount: item.amount,\n    })),\n    tax: cart.tax,\n    total: cart.total,\n    currency: cart.currency,\n  };\n};\n\nexport const mapFromConnectionStatus = (connectionStatus: ConnectionStatus): string => {\n  switch (connectionStatus) {\n    case ConnectionStatus.CONNECTED:\n      return 'CONNECTED';\n    case ConnectionStatus.CONNECTING:\n      return 'CONNECTING';\n    case ConnectionStatus.NOT_CONNECTED:\n      return 'NOT_CONNECTED';\n    default:\n      return 'UNKNOWN';\n  }\n};\n\nexport const mapFromPaymentStatus = (paymentStatus: PaymentStatus): string => {\n  switch (paymentStatus) {\n    case PaymentStatus.NOT_READY:\n      return 'NOT_READY';\n    case PaymentStatus.READY:\n      return 'READY';\n    case PaymentStatus.PROCESSING:\n      return 'PROCESSING';\n    case PaymentStatus.WAITING_FOR_INPUT:\n      return 'WAITING_FOR_INPUT';\n    default:\n      return 'UNKNOWN';\n  }\n};\n\nexport const convertReaderInterface = (reader: Reader): ReaderInterface => {\n  let location: LocationInterface | undefined = undefined;\n  if ((reader.location as unknown as Record<string, string>).id) {\n    location = reader.location as unknown as LocationInterface;\n  }\n  return {\n    baseUrl: '',\n    bootloaderVersion: '',\n    configVersion: '',\n    emvKeyProfileId: '',\n    firmwareVersion: '',\n    hardwareVersion: '',\n    macKeyProfileId: '',\n    pinKeyProfileId: '',\n    pinKeysetId: '',\n    settingsVersion: '',\n    trackKeyProfileId: '',\n    label: reader.label,\n    batteryLevel: 0,\n    batteryStatus: BatteryStatus.Unknown,\n    simulated: !reader.livemode,\n    serialNumber: reader.serial_number,\n    isCharging: 0,\n    id: 0,\n    availableUpdate: undefined,\n    locationId: (reader.location as unknown as Record<string, string>).id,\n    ipAddress: reader.ip_address || '',\n    status: mapFromReaderNetworkStatus(reader.status),\n    location: location || undefined,\n    locationStatus: LocationStatus.Unknown,\n    deviceType: mapFromDeviceType(reader.device_type),\n    deviceSoftwareVersion: reader.device_sw_version,\n  };\n};\n\nexport const mapFromDeviceType = (type: ReaderDeviceType): DeviceType => {\n  switch (type) {\n    case 'bbpos_chipper2x':\n      return DeviceType.chipper2X;\n    case 'stripe_m2':\n      return DeviceType.stripeM2;\n    case 'verifone_P400':\n      return DeviceType.verifoneP400;\n    case 'bbpos_wisepad3':\n      return DeviceType.wisePad3;\n    case 'bbpos_wisepos_e':\n      return DeviceType.wisePosE;\n    case 'stripe_s700':\n      return DeviceType.stripeS700;\n    default:\n      return DeviceType.unknown;\n  }\n};\n\nexport const mapFromReaderNetworkStatus = (status: string | null): NetworkStatus => {\n  switch (status) {\n    case 'offline':\n      return NetworkStatus.Offline;\n    case 'online':\n      return NetworkStatus.Online;\n    default:\n      return NetworkStatus.Unknown;\n  }\n};\n\ntype ReaderDeviceType =\n  | 'bbpos_chipper2x'\n  | 'bbpos_wisepad3'\n  | 'bbpos_wisepos_e'\n  | 'stripe_m2'\n  | 'verifone_P400'\n  | 'stripe_s700'; // added\n\nexport enum PaymentStatus {\n  NOT_READY = 'not_ready',\n  READY = 'ready',\n  WAITING_FOR_INPUT = 'waiting_for_input',\n  PROCESSING = 'processing',\n}\n\nexport enum ConnectionStatus {\n  CONNECTING = 'connecting',\n  CONNECTED = 'connected',\n  NOT_CONNECTED = 'not_connected',\n}\n\n// import {\n//   ConnectionStatus,\n//   PaymentStatus,\n// } from '@stripe/terminal-js/types/terminal';\n"]}