{"version":3,"file":"proto.js","sourceRoot":"","sources":["../../../src/stripe-types/proto.ts"],"names":[],"mappings":"","sourcesContent":["/** Properties of a TipOption. */\ninterface ITipOption {\n  /** REQUIRED: Amount of this tip option */\n  amount?: number | null;\n\n  /** Descriptor of the amount, displayed in the button */\n  label?: string | null;\n}\n/** Properties of a TipConfiguration. */\nexport interface ITipConfiguration {\n  /** List of at most 3 options */\n  options?: ITipOption[] | null;\n\n  /** Hide the custom amount button */\n  hide_custom_amount?: boolean | null;\n}\n/** Properties of a TipSelection. */\ninterface ITipSelection {\n  /** Amount associated with the selection */\n  amount?: number | null;\n}\n/** CreditCardBrand enum. */\ntype CreditCardBrand =\n  | 'INVALID_CREDIT_CARD_BRAND'\n  | 'UNKNOWN_CREDIT'\n  | 'AMERICAN_EXPRESS'\n  | 'DINERS'\n  | 'DISCOVER'\n  | 'JCB'\n  | 'MASTERCARD'\n  | 'VISA'\n  | 'CUP';\n\n/** CardEntryMethod enum. */\ntype CardEntryMethod =\n  | 'INVALID_ENTRY_METHOD'\n  | 'CHIP_READ'\n  | 'CONTACTLESS'\n  | 'FSWIPE'\n  | 'KEYED'\n  | 'SWIPED'\n  | 'BARCODE_READ';\n/** Properties of a CardPaymentMethod. */\ninterface ICardPaymentMethod {\n  /** Masked card data */\n  masked_pan?: string | null;\n\n  /** The card expiration date */\n  expiration_date?: string | null;\n\n  /** Brand of credit card tender, determined by BIN table lookup */\n  card_brand?: CreditCardBrand | null;\n\n  /** Entry method of payment */\n  card_entry_method?: CardEntryMethod | null;\n}\n/** Properties of a PaymentMethod. */\nexport interface IPaymentMethod {\n  /** PaymentMethod card_payment */\n  card_payment?: ICardPaymentMethod | null;\n\n  /** Tip selection chosen by the cardholder */\n  tip_selection?: ITipSelection | null;\n}\n/** Properties of a PaymentMethod. */\nexport interface IPaymentMethodReadReusableResponse {\n  /** Unique identifier for the Payment Method object */\n  id?: string | null;\n\n  /** Time at which the Payment Method object was created. Measured in seconds since the Unix epoch */\n  created?: number | null;\n\n  /** Customer ID */\n  customer?: string | null;\n\n  /** Whether this charge was made in live mode or not */\n  livemode?: boolean | null;\n\n  /** Meta data in JSON format */\n  metadata?: { [k: string]: string } | null;\n\n  /** PaymentMethod type */\n  type?: string | null;\n\n  /** Card representation of payment method */\n  card?: ICardPaymentMethodReadReusableResponse | null;\n}\n\n/** Properties of a CardPaymentMethod. */\ninterface ICardPaymentMethodReadReusableResponse {\n  /** Masked card data */\n  masked_pan?: string | null;\n\n  /** The card expiration date */\n  expiration_date?: string | null;\n\n  /** Brand of credit card tender, determined by BIN table lookup */\n  card_brand?: CreditCardBrand | null;\n\n  /** Entry method of payment */\n  card_entry_method?: CardEntryMethod | null;\n}\n\n/** Properties of an ErrorResponse. */\nexport interface IErrorResponse {\n  /** The type of error returned. */\n  type?: string | null;\n\n  /** ID of failed charge */\n  charge?: string | null;\n\n  /** For some errors that could be handled programmatically, a short string indicating the error code reported. (https://stripe.com/docs/error-codes) */\n  code?: string | null;\n\n  /** For card errors resulting from a card issuer decline, a short string indicating the card issuerâ€™s reason for the decline if they provide one. (https://stripe.com/docs/declines#issuer-declines) */\n  decline_code?: string | null;\n\n  /** A URL to more information about the error code reported. */\n  doc_url?: string | null;\n\n  /** A human-readable message providing more details about the error. For card errors, these messages can be shown to your users. */\n  message?: string | null;\n\n  /** If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field. */\n  param?: string | null;\n\n  /** Source used for the error */\n  source?: ISource | null;\n\n  /** Payment intent used for the error */\n  payment_intent?: IPaymentIntent | null;\n}\n/** Properties of an Owner. */\nexport interface IOwner {\n  /** Owner address */\n  address?: string | null;\n\n  /** Owner email */\n  email?: string | null;\n\n  /** Owner name */\n  name?: string | null;\n\n  /** Owner phone */\n  phone?: string | null;\n\n  /** Owner verified_address */\n  verified_address?: string | null;\n\n  /** Owner verified_email */\n  verified_email?: string | null;\n\n  /** Owner verified_name */\n  verified_name?: string | null;\n\n  /** Owner verified_phone */\n  verified_phone?: string | null;\n}\n/** Properties of a PaymentMethodDetails. */\nexport interface IPaymentMethodDetails {\n  /** Payment Method type (e.g. \"card_present\") */\n  type?: string | null;\n\n  /** PaymentMethodDetails card_present */\n  card_present?: ICardPresent | null;\n\n  /** PaymentMethodDetails interac_present */\n  interac_present?: ICardPresent | null;\n}\n/** Properties of a Refund. */\ninterface IRefund {\n  /** Refund id */\n  id?: string | null;\n\n  /** Refund amount */\n  amount?: number | null;\n\n  /** Refund charge */\n  charge?: string | null;\n\n  /** Time at which the Refund object was created. Measured in seconds since the Unix epoch */\n  created?: number | null;\n\n  /** Three-letter ISO currency code, in lowercase. Must be a supported currency */\n  currency?: string | null;\n\n  /** Meta data in JSON format */\n  metadata?: { [k: string]: string } | null;\n\n  /** Reason for refund */\n  reason?: string | null;\n\n  /** Status of refund */\n  status?: string | null;\n\n  /** Actual details of the payment method */\n  payment_method_details?: IPaymentMethodDetails | null;\n\n  /** If the refund failed, the reason for refund failure if known. */\n  failure_reason?: string | null;\n}\n/** Properties of a Refunds. */\ninterface IRefunds {\n  /** Refunds data */\n  data?: IRefund[] | null;\n\n  /** Refunds has_more */\n  has_more?: boolean | null;\n\n  /** Refunds total_count */\n  total_count?: number | null;\n}\n/** Properties of a Charge. */\ninterface ICharge {\n  /** ID for charge */\n  id?: string | null;\n\n  /** Amount that is associated with the charge */\n  amount?: number | null;\n\n  /** Amount that is associated with a refund of the charge */\n  amount_refunded?: number | null;\n\n  /** Whether this charge has been captured */\n  captured?: boolean | null;\n\n  /** Whether this charge has been refunded */\n  refunded?: boolean | null;\n\n  /** Time at which the Charge object was created. Measured in seconds since the Unix epoch */\n  created?: number | null;\n\n  /** Three-letter ISO currency code, in lowercase. Must be a supported currency. */\n  currency?: string | null;\n\n  /** An arbitrary string attached to the object. Often useful for displaying to users. */\n  description?: string | null;\n\n  /** An arbitrary string to be displayed on your customer's credit card statement. */\n  statement_descriptor?: string | null;\n\n  /** Email address that the receipt for the resulting payment will be sent to. */\n  receipt_email?: string | null;\n\n  /** Failure code if the charge was declined */\n  failure_code?: string | null;\n\n  /** Message associated with the failure code */\n  failure_message?: string | null;\n\n  /** Whether this charge was made in live mode or not */\n  livemode?: boolean | null;\n\n  /** Meta data in JSON format */\n  metadata?: { [k: string]: string } | null;\n\n  /** Source associated with the charge */\n  source?: ISource | null;\n\n  /** Payment intent ID associated with the charge */\n  payment_intent?: string | null;\n\n  /** Status of the charge */\n  status?: string | null;\n\n  /** Payment method ID */\n  payment_method?: string | null;\n\n  /** Actual details of the payment method */\n  payment_method_details?: IPaymentMethodDetails | null;\n\n  /** Whether the charge was paid */\n  paid?: boolean | null;\n\n  /** Receipt URL */\n  receipt_url?: string | null;\n\n  /** Refunds associated with charge */\n  refunds?: IRefunds | null;\n}\n/** Properties of a Charges. */\ninterface ICharges {\n  /** Charges data */\n  data?: ICharge[] | null;\n\n  /** Charges has_more */\n  has_more?: boolean | null;\n\n  /** Charges total_count */\n  total_count?: number | null;\n}\n/** Properties of a CardPresent. */\ninterface ICardPresent {\n  /** The last four digits of the card. */\n  last4?: string | null;\n\n  /** Card brand */\n  brand?: string | null;\n\n  /** Customer's signature if signed */\n  evidence_customer_signature?: string | null;\n\n  /** Method used by POS to read the card */\n  read_method?: string | null;\n\n  /** The EMV authorization response payload */\n  emv_auth_data?: string | null;\n\n  /** The EMV authorization response code */\n  authorization_response_code?: string | null;\n\n  /** AID */\n  dedicated_file_name?: string | null;\n\n  /** AID name */\n  application_preferred_name?: string | null;\n\n  /** TVR */\n  terminal_verification_results?: string | null;\n\n  /** TSI */\n  transaction_status_information?: string | null;\n\n  /** CVM type */\n  cvm_type?: string | null;\n\n  /** CardPresent reader */\n  reader?: string | null;\n\n  /** CardPresent fingerprint */\n  fingerprint?: string | null;\n\n  /** CardPresent authorization_code */\n  authorization_code?: string | null;\n}\n/** Properties of a Source. */\nexport interface ISource {\n  /** Unique identifier for the source card object. */\n  id?: string | null;\n\n  /** Source type (e.g. \"card_present\") */\n  type?: string | null;\n\n  /** Card payment method */\n  card_present?: ICardPresent | null;\n\n  /** Interac version of card present */\n  interac_present?: ICardPresent | null;\n\n  /** Meta data in JSON format */\n  metadata?: { [k: string]: string } | null;\n\n  /** Owner data */\n  owner?: IOwner | null;\n}\nexport interface IPaymentIntent {\n  /** Unique identifier for the Payment Intent object */\n  id?: string | null;\n\n  /** Time at which the Payment Intent object was created. Measured in seconds since the Unix epoch */\n  created?: number | null;\n\n  /** Status of this PaymentIntent */\n  status?: string | null;\n\n  /** Amount intended to be collected by this Payment Intent */\n  amount?: number | null;\n\n  /** Three-letter ISO currency code, in lowercase. Must be a supported currency. */\n  currency?: string | null;\n\n  /** Card present payment source field map */\n  source?: ISource | null;\n\n  /** An arbitrary string to be displayed on your customer's credit card statement. */\n  statement_descriptor?: string | null;\n\n  /** An arbitrary string attached to the object. Often useful for displaying to users. */\n  description?: string | null;\n\n  /** Email address that the receipt for the resulting payment will be sent to. */\n  receipt_email?: string | null;\n\n  /** Whether this charge was made in live mode or not */\n  livemode?: boolean | null;\n\n  /** Last payment error on a charge (if retrieved) */\n  last_payment_error?: IErrorResponse | null;\n\n  /** Meta data in JSON format */\n  metadata?: { [k: string]: string } | null;\n\n  /** Charges associated with the payment intent */\n  charges?: ICharges | null;\n\n  /** ID for payment method */\n  payment_method?: string | null;\n}\n\nexport interface ISetupIntent {\n  /** Unique identifier for the object. */\n  id?: string | null;\n\n  /** The client secret of this SetupIntent. Used for client-side retrieval using a publishable key. */\n  client_secret?: string | null;\n\n  /** ID of the Customer this SetupIntent belongs to, if one exists. */\n  customer?: string | null;\n\n  /** An arbitrary string attached to the object. Often useful for displaying to users. */\n  description?: string | null;\n\n  /** The error encountered in the previous SetupIntent confirmation. */\n  last_setup_error?: ILastSetupError | null;\n\n  /** Meta data in JSON format */\n  metadata?: { [k: string]: string } | null;\n\n  /** If present, this property tells you what actions you need to take in order for your customer to continue payment setup. */\n  next_action?: INextAction | null;\n\n  /** ID of the payment method used with this SetupIntent. */\n  payment_method?: string | null;\n\n  /** The list of payment method types (e.g. card) that this SetupIntent is allowed to set up. */\n  payment_method_types?: string[] | null;\n\n  /** Status of this SetupIntent, one of requires_payment_method, requires_confirmation, requires_action, processing, canceled, or succeeded. */\n  status?: string | null;\n\n  /** Indicates how the payment method is intended to be used in the future. */\n  usage?: string | null;\n\n  /** Time at which the object was created. Measured in seconds since the Unix epoch. */\n  created?: number | null;\n\n  /** The most recent SetupAttempt for this SetupIntent. */\n  latest_attempt?: ISetupAttempt | null;\n\n  /** Has the value true if the object exists in live mode or the value false if the object exists in test mode. */\n  livemode?: boolean | null;\n\n  /** ID of the multi use Mandate generated by the SetupIntent. */\n  mandate?: string | null;\n\n  /** ID of the single_use Mandate generated by the SetupIntent. */\n  single_use_mandate?: string | null;\n\n  /** ID of the Connect application that created the SetupIntent. */\n  application?: string | null;\n\n  /** The account (if any) for which the setup is intended. */\n  on_behalf_of?: string | null;\n\n  /** Payment-method-specific configuration for this SetupIntent. */\n  payment_method_options?: IPaymentMethodOptions | null;\n}\n\n/** Properties of a SetupAttempt. */\nexport interface ISetupAttempt {\n  /** Unique identifier for the object. */\n  id?: string | null;\n\n  /** String representing the objectâ€™s type: \"setup_attempt\" */\n  object?: string | null;\n\n  /** ID of the Connect application that created the SetupIntent. */\n  application?: string | null;\n\n  /** Time at which the object was created. Measured in seconds since the Unix epoch. */\n  created?: number | null;\n\n  /** ID of the Customer this SetupIntent belongs to, if one exists. */\n  customer?: string | null;\n\n  /** Has the value true if the object exists in live mode or the value false if the object exists in test mode. */\n  livemode?: boolean | null;\n\n  /** The account (if any) for which the setup is intended. */\n  on_behalf_of?: string | null;\n\n  /** ID of the payment method used with this SetupAttempt. */\n  payment_method?: string | null;\n\n  /** Details about the payment method at the time of SetupIntent confirmation. */\n  payment_method_details?: IPaymentMethodDetails | null;\n\n  /** The error encountered during this attempt to confirm the SetupIntent, if any. */\n  setup_error?: ISetupError | null;\n\n  /** ID of the SetupIntent that this attempt belongs to. */\n  setup_intent?: string | null;\n\n  /** Status of this SetupAttempt, one of requires_confirmation, requires_action, processing, succeeded, failed, or abandoned. */\n  status?: string | null;\n\n  /** The value of usage on the SetupIntent at the time of this confirmation, one of off_session or on_session. */\n  usage?: string | null;\n}\n\n/** Properties of a SetupError. */\nexport interface ISetupError {\n  /** For some errors that could be handled programmatically, a short string indicating the error code reported. */\n  code?: string | null;\n\n  /** For card errors resulting from a card issuer decline, a short string indicating the card issuerâ€™s reason for the decline if they provide one. */\n  decline_code?: string | null;\n\n  /** A URL to more information about the error code reported. */\n  doc_url?: string | null;\n\n  /** A human-readable message providing more details about the error. For card errors, these messages can be shown to your users. */\n  message?: string | null;\n\n  /** If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field. */\n  param?: string | null;\n\n  /** The PaymentMethod object for errors returned on a request involving a PaymentMethod. */\n  payment_method?: IPaymentMethod | null;\n\n  /** If the error is specific to the type of payment method, the payment method type that had a problem. This field is only populated for invoice-related errors. */\n  payment_method_type?: string | null;\n\n  /** The type of error returned. One of api_connection_error, api_error, authentication_error, card_error, idempotency_error, invalid_request_error, or rate_limit_error */\n  type?: string | null;\n}\n\n/** Properties of an ActivateTerminalRequest. */\nexport interface IActivateTerminalRequest {\n  /** An activation token obtained from Stripe that can be used to activate the reader */\n  pos_activation_token?: string | null;\n\n  /** The fingerprint for the POS authenticating to rabbit */\n  pos_device_id?: string | null;\n\n  /** The terminal hardware information */\n  pos_hardware_info?: any | null;\n\n  /** The terminal software information */\n  pos_software_info?: any | null;\n\n  /** Provide RPC error if reader is currently in use */\n  fail_if_in_use?: boolean | null;\n\n  /** The logical identity of terminal (i.e. lane number) authenticating to rabbit. */\n  terminal_id?: string | null;\n\n  /** ActivateTerminalRequest terminal_ip */\n  terminal_ip?: string | null;\n\n  /** The store name associated with the POS */\n  store_name?: string | null;\n\n  /** The store address associated with the POS */\n  store_address?: any | null;\n}\n\n/** Properties of a SetReaderDisplayRequest. */\nexport interface ISetReaderDisplayRequest {\n  /** SetReaderDisplayRequest type */\n  type?: string | null;\n\n  /** SetReaderDisplayRequest cart */\n  cart?: ICart | null;\n}\n\nexport interface ICart {\n  /** All line items in the basket */\n  line_items?: ILineItem[] | null;\n\n  /** Modifiers that have been applied to the basket. */\n  modifiers?: IModifier[] | null;\n\n  /** Any discounts that have been added to the basket. */\n  discounts?: IDiscount[] | null;\n\n  /** Tenders that have been charged/refunded */\n  tenders?: ITender[] | null;\n\n  /** Total amount of tax */\n  tax?: number | null;\n\n  /** Total balance of cart due */\n  total?: number | null;\n\n  /** The currency of the basket (i.e. USD or AUD). */\n  currency?: string | null;\n}\n\n/** Properties of a LineItem. */\ninterface ILineItem {\n  /** LineItem quantity */\n  quantity?: number | null;\n\n  /** A detailed description of the item. */\n  description?: string | null;\n\n  /** This is equal to extended_price - discount + modifiers */\n  amount?: number | null;\n\n  /** The discounts that have been applied to this line item. */\n  discounts?: IDiscount[] | null;\n\n  /** The modifiers that have been applied to this line item. */\n  modifiers?: IModifier[] | null;\n}\n\ninterface IModifier {\n  /** A detailed description of discount. */\n  description?: string | null;\n\n  /** Amount in cents of the modification. */\n  amount?: number | null;\n}\n/** Properties of a Discount. */\ninterface IDiscount {\n  /** A detailed description of discount. */\n  description?: string | null;\n\n  /** The amount and mechanism of the discount */\n  amount?: number | null;\n}\n/** Properties of a Tender. */\ninterface ITender {\n  /** A detailed description of tender. */\n  description?: string | null;\n\n  /** Amount in cents of the tender. */\n  amount?: number | null;\n}\n\ninterface ILastSetupError {\n  /** For some errors that could be handled programmatically, a short string indicating the error code reported. */\n  code?: string | null;\n\n  /** For card errors resulting from a card issuer decline, a short string indicating the card issuerâ€™s reason for the decline if they provide one. */\n  decline_code?: string | null;\n\n  /** A URL to more information about the error code reported. */\n  doc_url?: string | null;\n\n  /** A human-readable message providing more details about the error. For card errors, these messages can be shown to users. */\n  message?: string | null;\n\n  /** If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field. */\n  param?: string | null;\n\n  /** The PaymentMethod object for errors returned on a request involving a PaymentMethod. */\n  payment_method?: IPaymentMethod | null;\n\n  /** One of: api_connection_error, api_error, authentication_error, card_error, idempotency_error, invalid_request_error, or rate_limit_error */\n  type?: string | null;\n}\n\ninterface INextAction {\n  /** Contains instructions for authenticating by redirecting your customer to another page or application. */\n  redirect_to_url?: IRedirectToUrl | null;\n\n  /** Type of the next action to perform, one of redirect_to_url or use_stripe_sdk. */\n  type?: string | null;\n\n  /** When confirming a SetupIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. */\n  use_stripe_sdk?: { [k: string]: string } | null;\n}\n\ninterface IRedirectToUrl {\n  /** If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion. */\n  return_url?: string | null;\n\n  /** The URL you must redirect your customer to in order to authenticate. */\n  url?: string | null;\n}\ninterface IPaymentMethodOptions {\n  /** PaymentMethodOptions card */\n  card?: ICardOptions | null;\n}\n\ninterface ICardOptions {\n  /** CardOptions request_three_d_secure */\n  request_three_d_secure?: Request3dSecureType | null;\n}\n\ntype Request3dSecureType = 'automatic' | 'any';\n"]}